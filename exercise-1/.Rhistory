# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("pasta w/ meatball", "breadstick")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- list(meals, dinner = c("pizza", "chips", "coke"))
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- meals, list(dinner = c("pizza", "chips", "coke"))
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- meals + list(dinner = c("pizza", "chips", "coke"))
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
listFromMethods()
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- list(dinner = c("pizza", "chips", "coke"))
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
meals$breakfast
sum(nchar(meals$breakfast))
sum(nchar(meals$lunch))
sum(nchar(meals))
15 + 27
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("pizza", "chips", "coke"))
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("pizza", "chips", "coke"))
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("pizza", "chips", "coke")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals$5 <- meals[[lunch]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals$4 <- meals[[lunch]]
meals[["lunch"]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals$4 <- meals[["lunch"]]
meals$1
meals[[1]]
styler:::style_active_file()
setwd("D:/classes/INFO 201/ch8-lists/exercise-1")
styler:::style_active_file()
meals
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items <- lapply(meals, length)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
seahawks_scored_first4 <- c(9, 12, 27, 46)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
seahawks_allowed_first4 <- c(17, 9, 33, 18)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks_scored_first4, seahawks_allowed_first4)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- seahawks_scored_first4 - seahawks_allowed_first4
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponents <- c("Packers", "49ers", "Titans", "Colts")
# Exercise 1: creating data frames
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
points <- c(9, 12, 27, 46)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
allowed <- c(17, 9, 33, 18)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(points, allowed)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- points - allowed
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent names corresponding to the games played
opponents <- c("Packers", "49ers", "Titans", "Colts")
# Assign your dataframe rownames of their opponents
# View your data frame to see how it has changed!
# Assign your dataframe rownames of their opponents
rownames(games) <- opponents
# View your data frame to see how it has changed!
View(games)
games$points
games$Packers
games[,"diff"]
games["jets", "diff"]
games["Colts", "diff"]
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- c(paste("Employee") 1:100)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(40000,50000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100,40000,50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
sal_change <- runif(100, -5000, 10000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
emp_salaries <- runif(100,40000,50000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries, sal_change)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, emp_salaries, sal_change)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries2017 <- runif(100,40000,50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries2018 <- salaries2017 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries2017, salaries2018)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries2018 - salaries2017
View(salaries)
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries2018 > salaries2017
# How many employees got a raise?
salaries(,got_raise == T)
# How many employees got a raise?
num(salaries(,got_raise == T))
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "Joey"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 365 * 24
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function (name, age) {
intro <- paste("Hello my name is ", name, ", and I'm ", age, "years old.")
intro
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
# Write a function `double()` that takes in a value and
# returns that value times two
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
# Write a function `cube()` that takes in a value and returns that value cubed
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
# Create a vector `numbers` that is the numbers 700 through 999
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
# Create a vector `lower_numbers` that is the numbers 500:699
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
install.packages("stringr")
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
# install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "Joey"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 365 * 24
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function (name, age) {
intro <- paste("Hello my name is ", name, ", and I'm ", age, "years old.")
intro
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
# Write a function `double()` that takes in a value and
# returns that value times two
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
# Write a function `cube()` that takes in a value and returns that value cubed
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
# Create a vector `numbers` that is the numbers 700 through 999
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
# Create a vector `lower_numbers` that is the numbers 500:699
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
intro <- paste("Hello my name is", name, ", and I'm ", age, "years old.")
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function (name, age) {
intro <- paste("Hello my name is", name, ", and I'm ", age, "years old.")
intro
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function (name, age) {
intro <- paste("Hello my name is ", name, ", and I'm ", age, "years old.",sep="")
intro
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub(my_intro,"Hello, my name is", "Hey, I'm")
r `my_intro` variable
casual_intro <- my_intro
casual_intro <- sub(casual_intro,"Hello, my name is", "Hey, I'm")
casual_intro <- my_intro
sub(casual_intro,"Hello, my name is", "Hey, I'm")
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function (name, age) {
intro <- paste("Hello my name is ", name, ", and I'm ", age, " years old.",sep="")
intro
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
sub(casual_intro,"Hello, my name is", "Hey, I'm")
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- my_intro
casual_intro <- sub(casual_intro,"Hello, my name is", "Hey, I'm")
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- my_intro
casual_intro <- sub("Hello my name is", "Hey,I'm")
casual_intro <- sub("Hello my name is", "Hey,I'm", casual_intro)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- my_intro
casual_intro <- sub("Hello my name is", "Hey, I'm", casual_intro)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- my_intro
sub("Hello my name is", "Hey, I'm", casual_intro)
casual_intro <- sub("Hello my name is", "Hey, I'm", casual_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
e_count <- str_count(my_intro, "e")
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
e_count <- str_count(my_intro,'e')
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
e_count <- str_count(my_intro, pattern = "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
value * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(60 * 24)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
value * value * value
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter", "The Shawshank Redemption", "Ferris Buelers Day Off", "Saving Private Ryan", "Breakfast Club","Dead Poets Society")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movie!")
excited
excited
View(cube)
View(movies)
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- subset(movies,1:3,5:6)
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- subset(movies,1:3,5)
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- subset(movies,1:3)
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- subset(movies,1)
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- subset(movies, movies[-4])
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- subset(movies[-4])
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- subset(movies, [-4])
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- subset(movies, -4)
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- subset(movies, x == -4)
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- subset(movies, movies == -4)
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- subset(movies, movies != 4)
without_four
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- subset(movies, movies < 4 & movies > 4)
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- subset(movies, -4)
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- subset(movies, c(T, T, T, F, T, T))
without_four
movies
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- paste(700:999)
numbers
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers_mean)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(paste(numbers))
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(print(numbers))
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- max(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
